Command Injection:
	A command injection flaw in a web application takes advantage of the manner in which web applications process user input and pass it to the command line to perform a task
	Can put multiple commands on one line using an ';' between commands
		Can also use '&&' or '||'
	Can also use '"' marks to close out things like echo "<input here>";
	Can prevent by using the application to do the work using the command line
	If this is not an option, then you need to sanitise user input
		Best to research a third party library to do the job of sanitising input

File Inclusion:
	Comes as a result of including resources on a page based on user input, in a way that the included file is executed by the web application
	There are generally two kinds of file inclusion:
		First is local file inclusion, which is the most common type
			Allows us to load arbitrary files from the web server by changing the ?file= parameter
		Next type is remote file inclusion, more rare but also more useful
			Allows us to include files on remote systems also
	Best way to dodge this is to avoid dynamically including files based on user input
	Could also have whitelist of allowed files that can be included
	For remote file inclusion there is usually there is a configuration option to turn off the ability to include files from remote servers

Cross Site Scripting:
	Is a client-side attack, meaning even though the vulnerability is in the site, the targets of the attack are the users browsing the site
	The goal is for the attacker is to be able to run some JavaScript code in the browsers of the people visiting the site
	Can use <script> tags to input javascript into a site:
		?name-bob<script>alert("test");</script>
	A reflected cross-site scripting attack is when the code isn't stored anywhere except in the URL
	Stored XSS attack is stored in the database, such as in a forum postand affects everyone who visits the page
	Only way to mitigate is to sanitise user input, best to use a third party library
		PHP recommended is the Zend Escape file

SQL Injection:
	SQL = 'Structured Query Language'
	Simple SQL query looks like:
		SELECT username, password FROM users WHERE username="bob";
	An sql injection attack is found when a SQL query is built up using user input
	Blind SQL injection is where a flaw exists but doesn't print the results of the query
		Common method is to use a time delay
	Can often identify a SQL injection flaw by simply putting in a single quote or double quote into the entry field
	Best way to mitigate SQL injections is not to use an insecure method of passing queries to the database
