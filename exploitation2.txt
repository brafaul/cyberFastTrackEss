Session Guessing:
	When you log into a site, it gives you a session token that identifies you
	When you go back to the site later, your browser will present the site with the session token, identifing that you have already logged in
	If the session token generation scheme on a web app is vulnerable to guessing then there is a way of guessing valid tokens, meaning an attacker could impersonate other users
	Session token should only be temporary not stored in a database as:
		The ID never changes and never expires so if someone steals it, it will remain valid forever
		If the id is "user-<someNum>" it would be easy to guess
	Some tokens may be hashed
	Best way to mitigate a session guessing attack it to use truly random session tokens that expire

Clickjacking:
	Where a user can be tricked into clicking on something without even realising they did it
	To mitigate should send one of the following headers in the X-Frame_Options of every page:
		DENY: Prevent the page from ever being loaded into an iframe
		SAMEORIGIN: Allows iframes to be loaded but only if they are loading from the same domain
		ALLOW-FROM: Allows iframes to only be loaded from the approved domain
	Make sure the web server itself sends the tags, not inside meta-tags

Cross Site Request Forgery:
	Tricking someone into clicking a link to cause a GET request to be sent
	Two steps to mitigating a CSRF attack:
		1. Male sure every HTTP request submitting a form or any other kind of input comes from 'same origin'
		2. Use a CSRF token, which is required by every form or input on the site
			-Should be randomly generated and hidden from the user, with a unique value
			-Avoid using them in GET request

Directory Traversal:
	Exists where a file is loaded based on a filename provided by the user
	For example, an attacker could use '..' to access the directory above the one they are currently in
	Best way to mitigate is not to use user input when making file system calls
	Could also change it to accept indexes instead of file names
	Could also filter input

File Upload:
	A flaw where the user can upload an arbitrary file to the server and then visit it to execute code
	Can bypass some filters that prevent uploading certain file types using:
		-Naming the file 'shell.php.jpg'
		-Editing the POST request to change the MIME type of the file to make it seem like an image
		-Uploading and '.htaccess' file to change the files which are allowed to be uploaded
	Mitigate file upload vulnerabilites:
		-Restrict what file types can be uploaded
		-Check the uploaded file is the correct type by scanning in depth
		-Rename the file or store it on a database
		-Remove execute permissions from the upload directory
		-Make sure files such as .htacess cannot be replaced by the upload form
		-Make sure files with double extensions cannot be executed
		-Make sure only the upload folder has write permissions set on it

Vulnerability Scanners:
	Work by crawling all the pages on a site and making an index of them, then going to each site and attempting multiple web application attacks against every from of user input on the site
	Few things to keep in mind:
		1. Make sure you know what the scanner is about to do
		2. Make sure you've configured your scanner to log into the site if that is what is required
		3. Make sure you tell your scanner what to avoid!
		4. Watch out for captcha
		5. Read the scanner's log files to make sure it is working in a sensible manner
	Scanners are noisy and produce a lot of logs
	Could be an indication that someone is about to attack
	Should run a 'web application firewall' (WAF) in front of your web application
		-Works by intercepting suspicous requests that looks like attacks and preventing them from ever reaching the web application 
